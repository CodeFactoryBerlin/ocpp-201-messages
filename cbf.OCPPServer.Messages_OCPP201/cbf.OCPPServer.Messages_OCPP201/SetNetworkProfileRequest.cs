//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace cbf.OCPPServer.Messages_OCPP201
{
    using System = global::System;


    /// <summary>
    /// APN. APN_ Authentication. APN_ Authentication_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:568828
    /// <br/>Authentication method.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum APNAuthenticationEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CHAP")]
        CHAP = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAP")]
        PAP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTO")]
        AUTO = 3,

    }

    /// <summary>
    /// Applicable Network Interface.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OCPPInterfaceEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Wired0")]
        Wired0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Wired1")]
        Wired1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Wired2")]
        Wired2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Wired3")]
        Wired3 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Wireless0")]
        Wireless0 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Wireless1")]
        Wireless1 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Wireless2")]
        Wireless2 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Wireless3")]
        Wireless3 = 7,

    }

    /// <summary>
    /// Communication_ Function. OCPP_ Transport. OCPP_ Transport_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569356
    /// <br/>Defines the transport protocol (e.g. SOAP or JSON). Note: SOAP is not supported in OCPP 2.0, but is supported by other versions of OCPP.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OCPPTransportEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JSON")]
        JSON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SOAP")]
        SOAP = 1,

    }

    /// <summary>
    /// Communication_ Function. OCPP_ Version. OCPP_ Version_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569355
    /// <br/>Defines the OCPP version used for this communication function.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum OCPPVersionEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OCPP12")]
        OCPP12 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OCPP15")]
        OCPP15 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OCPP16")]
        OCPP16 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"OCPP20")]
        OCPP20 = 3,

    }

    /// <summary>
    /// VPN. Type. VPN_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569277
    /// <br/>Type of VPN
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum VPNEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IKEv2")]
        IKEv2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPSec")]
        IPSec = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"L2TP")]
        L2TP = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PPTP")]
        PPTP = 3,

    }

    /// <summary>
    /// APN
    /// <br/>urn:x-oca:ocpp:uid:2:233134
    /// <br/>Collection of configuration data needed to make a data-connection over a cellular network.
    /// <br/>
    /// <br/>NOTE: When asking a GSM modem to dial in, it is possible to specify which mobile operator should be used. This can be done with the mobile country code (MCC) in combination with a mobile network code (MNC). Example: If your preferred network is Vodafone Netherlands, the MCC=204 and the MNC=04 which means the key PreferredNetwork = 20404 Some modems allows to specify a preferred network, which means, if this network is not available, a different network is used. If you specify UseOnlyPreferredNetwork and this network is not available, the modem will not dial in.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class APNType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// APN. APN. URI
        /// <br/>urn:x-oca:ocpp:uid:1:568814
        /// <br/>The Access Point Name as an URL.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apn", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Apn { get; set; }

        /// <summary>
        /// APN. APN. User_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:568818
        /// <br/>APN username.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apnUserName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ApnUserName { get; set; }

        /// <summary>
        /// APN. APN. Password
        /// <br/>urn:x-oca:ocpp:uid:1:568819
        /// <br/>APN Password.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("apnPassword", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ApnPassword { get; set; }

        /// <summary>
        /// APN. SIMPIN. PIN_ Code
        /// <br/>urn:x-oca:ocpp:uid:1:568821
        /// <br/>SIM card pin code.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SimPin { get; set; }

        /// <summary>
        /// APN. Preferred_ Network. Mobile_ Network_ ID
        /// <br/>urn:x-oca:ocpp:uid:1:568822
        /// <br/>Preferred network, written as MCC and MNC concatenated. See note.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredNetwork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6)]
        public string PreferredNetwork { get; set; }

        /// <summary>
        /// APN. Use_ Only_ Preferred_ Network. Indicator
        /// <br/>urn:x-oca:ocpp:uid:1:568824
        /// <br/>Default: false. Use only the preferred Network, do
        /// <br/>not dial in when not available. See Note.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useOnlyPreferredNetwork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseOnlyPreferredNetwork { get; set; } = false;

        [Newtonsoft.Json.JsonProperty("apnAuthentication", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public APNAuthenticationEnumType ApnAuthentication { get; set; }

    }

    /// <summary>
    /// Communication_ Function
    /// <br/>urn:x-oca:ocpp:uid:2:233304
    /// <br/>The NetworkConnectionProfile defines the functional and technical parameters of a communication link.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NetworkConnectionProfileType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        [Newtonsoft.Json.JsonProperty("apn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public APNType Apn { get; set; }

        [Newtonsoft.Json.JsonProperty("ocppVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OCPPVersionEnumType OcppVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("ocppTransport", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OCPPTransportEnumType OcppTransport { get; set; }

        /// <summary>
        /// Communication_ Function. OCPP_ Central_ System_ URL. URI
        /// <br/>urn:x-oca:ocpp:uid:1:569357
        /// <br/>URL of the CSMS(s) that this Charging Station  communicates with.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ocppCsmsUrl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string OcppCsmsUrl { get; set; }

        /// <summary>
        /// Duration in seconds before a message send by the Charging Station via this network connection times-out.
        /// <br/>The best setting depends on the underlying network and response times of the CSMS.
        /// <br/>If you are looking for a some guideline: use 30 seconds as a starting point.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageTimeout", Required = Newtonsoft.Json.Required.Always)]
        public int MessageTimeout { get; set; }

        /// <summary>
        /// This field specifies the security profile used when connecting to the CSMS with this NetworkConnectionProfile.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityProfile", Required = Newtonsoft.Json.Required.Always)]
        public int SecurityProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("ocppInterface", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OCPPInterfaceEnumType OcppInterface { get; set; }

        [Newtonsoft.Json.JsonProperty("vpn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VPNType Vpn { get; set; }

    }

    /// <summary>
    /// VPN
    /// <br/>urn:x-oca:ocpp:uid:2:233268
    /// <br/>VPN Configuration settings
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class VPNType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// VPN. Server. URI
        /// <br/>urn:x-oca:ocpp:uid:1:569272
        /// <br/>VPN Server Address
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("server", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(512)]
        public string Server { get; set; }

        /// <summary>
        /// VPN. User. User_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:569273
        /// <br/>VPN User
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string User { get; set; }

        /// <summary>
        /// VPN. Group. Group_ Name
        /// <br/>urn:x-oca:ocpp:uid:1:569274
        /// <br/>VPN group.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Group { get; set; }

        /// <summary>
        /// VPN. Password. Password
        /// <br/>urn:x-oca:ocpp:uid:1:569275
        /// <br/>VPN Password.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string Password { get; set; }

        /// <summary>
        /// VPN. Key. VPN_ Key
        /// <br/>urn:x-oca:ocpp:uid:1:569276
        /// <br/>VPN shared secret.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VPNEnumType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class SetNetworkProfileRequest
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// Slot in which the configuration should be stored.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurationSlot", Required = Newtonsoft.Json.Required.Always)]
        public int ConfigurationSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("connectionData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NetworkConnectionProfileType ConnectionData { get; set; } = new NetworkConnectionProfileType();

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
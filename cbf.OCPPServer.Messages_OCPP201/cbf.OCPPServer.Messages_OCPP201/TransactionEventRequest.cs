//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace cbf.OCPPServer.Messages_OCPP201
{
    using System = global::System;

    


    /// <summary>
    /// Transaction. State. Transaction_ State_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569419
    /// <br/>Current charging state, is required when state
    /// <br/>has changed.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ChargingStateEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Charging")]
        Charging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EVConnected")]
        EVConnected = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SuspendedEV")]
        SuspendedEV = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SuspendedEVSE")]
        SuspendedEVSE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Idle")]
        Idle = 4,

    }










    /// <summary>
    /// Transaction. Stopped_ Reason. EOT_ Reason_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569413
    /// <br/>This contains the reason why the transaction was stopped. MAY only be omitted when Reason is "Local".
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum ReasonEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DeAuthorized")]
        DeAuthorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EmergencyStop")]
        EmergencyStop = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EnergyLimitReached")]
        EnergyLimitReached = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EVDisconnected")]
        EVDisconnected = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GroundFault")]
        GroundFault = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ImmediateReset")]
        ImmediateReset = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LocalOutOfCredit")]
        LocalOutOfCredit = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MasterPass")]
        MasterPass = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OvercurrentFault")]
        OvercurrentFault = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerLoss")]
        PowerLoss = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"PowerQuality")]
        PowerQuality = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Reboot")]
        Reboot = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Remote")]
        Remote = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"SOCLimitReached")]
        SOCLimitReached = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"StoppedByEV")]
        StoppedByEV = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TimeLimitReached")]
        TimeLimitReached = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Timeout")]
        Timeout = 18,

    }

    /// <summary>
    /// This contains the type of this event.
    /// <br/>The first TransactionEvent of a transaction SHALL contain: "Started" The last TransactionEvent of a transaction SHALL contain: "Ended" All others SHALL contain: "Updated"
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum TransactionEventEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Ended")]
        Ended = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Started")]
        Started = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Updated")]
        Updated = 2,

    }

    /// <summary>
    /// Reason the Charging Station sends this message to the CSMS
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum TriggerReasonEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Authorized")]
        Authorized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CablePluggedIn")]
        CablePluggedIn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingRateChanged")]
        ChargingRateChanged = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargingStateChanged")]
        ChargingStateChanged = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Deauthorized")]
        Deauthorized = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"EnergyLimitReached")]
        EnergyLimitReached = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EVCommunicationLost")]
        EVCommunicationLost = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"EVConnectTimeout")]
        EVConnectTimeout = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"MeterValueClock")]
        MeterValueClock = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"MeterValuePeriodic")]
        MeterValuePeriodic = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TimeLimitReached")]
        TimeLimitReached = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Trigger")]
        Trigger = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"UnlockCommand")]
        UnlockCommand = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"StopAuthorized")]
        StopAuthorized = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"EVDeparted")]
        EVDeparted = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"EVDetected")]
        EVDetected = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"RemoteStop")]
        RemoteStop = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"RemoteStart")]
        RemoteStart = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"AbnormalCondition")]
        AbnormalCondition = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"SignedDataReceived")]
        SignedDataReceived = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"ResetCommand")]
        ResetCommand = 20,

    }










    /// <summary>
    /// Transaction
    /// <br/>urn:x-oca:ocpp:uid:2:233318
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransactionType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// This contains the Id of the transaction.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(36)]
        public string TransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("chargingState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ChargingStateEnumType? ChargingState { get; set; }

        /// <summary>
        /// Transaction. Time_ Spent_ Charging. Elapsed_ Time
        /// <br/>urn:x-oca:ocpp:uid:1:569415
        /// <br/>Contains the total time that energy flowed from EVSE to EV during the transaction (in seconds). Note that timeSpentCharging is smaller or equal to the duration of the transaction.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpentCharging", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeSpentCharging { get; set; }

        [Newtonsoft.Json.JsonProperty("stoppedReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReasonEnumType? StoppedReason { get; set; }

        /// <summary>
        /// The ID given to remote start request (&amp;lt;&amp;lt;requeststarttransactionrequest, RequestStartTransactionRequest&amp;gt;&amp;gt;. This enables to CSMS to match the started transaction to the given start request.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remoteStartId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RemoteStartId { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class TransactionEventRequest
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        [Newtonsoft.Json.JsonProperty("eventType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionEventEnumType EventType { get; set; }

        [Newtonsoft.Json.JsonProperty("meterValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<MeterValueType> MeterValue { get; set; }

        /// <summary>
        /// The date and time at which this transaction event occurred.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("triggerReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TriggerReasonEnumType TriggerReason { get; set; }

        /// <summary>
        /// Incremental sequence number, helps with determining if all messages of a transaction have been received.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seqNo", Required = Newtonsoft.Json.Required.Always)]
        public int SeqNo { get; set; }

        /// <summary>
        /// Indication that this transaction event happened when the Charging Station was offline. Default = false, meaning: the event occurred when the Charging Station was online.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Offline { get; set; } = false;

        /// <summary>
        /// If the Charging Station is able to report the number of phases used, then it SHALL provide it. When omitted the CSMS may be able to determine the number of phases used via device management.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfPhasesUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfPhasesUsed { get; set; }

        /// <summary>
        /// The maximum current of the connected cable in Ampere (A).
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cableMaxCurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CableMaxCurrent { get; set; }

        /// <summary>
        /// This contains the Id of the reservation that terminates as a result of this transaction.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reservationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReservationId { get; set; }

        [Newtonsoft.Json.JsonProperty("transactionInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TransactionType TransactionInfo { get; set; } = new TransactionType();

        [Newtonsoft.Json.JsonProperty("evse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EVSEType Evse { get; set; }

        [Newtonsoft.Json.JsonProperty("idToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdTokenType IdToken { get; set; }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace cbf.OCPPServer.Messages_OCPP201
{
    using System = global::System;

    


    /// <summary>
    /// Charging_ Needs. Requested. Energy_ Transfer_ Mode_ Code
    /// <br/>urn:x-oca:ocpp:uid:1:569209
    /// <br/>Mode of energy transfer requested by the EV.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public enum EnergyTransferModeEnumType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DC")]
        DC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AC_single_phase")]
        AC_single_phase = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AC_two_phase")]
        AC_two_phase = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AC_three_phase")]
        AC_three_phase = 3,

    }

    /// <summary>
    /// AC_ Charging_ Parameters
    /// <br/>urn:x-oca:ocpp:uid:2:233250
    /// <br/>EV AC charging parameters.
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ACChargingParametersType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
        /// <br/>urn:x-oca:ocpp:uid:1:569211
        /// <br/>Amount of energy requested (in Wh). This includes energy required for preconditioning.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("energyAmount", Required = Newtonsoft.Json.Required.Always)]
        public int EnergyAmount { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Min. Current
        /// <br/>urn:x-oca:ocpp:uid:1:569212
        /// <br/>Minimum current (amps) supported by the electric vehicle (per phase).
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMinCurrent", Required = Newtonsoft.Json.Required.Always)]
        public int EvMinCurrent { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Max. Current
        /// <br/>urn:x-oca:ocpp:uid:1:569213
        /// <br/>Maximum current (amps) supported by the electric vehicle (per phase). Includes cable capacity.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMaxCurrent", Required = Newtonsoft.Json.Required.Always)]
        public int EvMaxCurrent { get; set; }

        /// <summary>
        /// AC_ Charging_ Parameters. EV_ Max. Voltage
        /// <br/>urn:x-oca:ocpp:uid:1:569214
        /// <br/>Maximum voltage supported by the electric vehicle
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMaxVoltage", Required = Newtonsoft.Json.Required.Always)]
        public int EvMaxVoltage { get; set; }

    }

    /// <summary>
    /// Charging_ Needs
    /// <br/>urn:x-oca:ocpp:uid:2:233249
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ChargingNeedsType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        [Newtonsoft.Json.JsonProperty("acChargingParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ACChargingParametersType AcChargingParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("dcChargingParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DCChargingParametersType DcChargingParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("requestedEnergyTransfer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EnergyTransferModeEnumType RequestedEnergyTransfer { get; set; }

        /// <summary>
        /// Charging_ Needs. Departure_ Time. Date_ Time
        /// <br/>urn:x-oca:ocpp:uid:1:569223
        /// <br/>Estimated departure time of the EV.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("departureTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DepartureTime { get; set; }

    }

    /// <summary>
    /// DC_ Charging_ Parameters
    /// <br/>urn:x-oca:ocpp:uid:2:233251
    /// <br/>EV DC charging parameters
    /// <br/>
    /// <br/>
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class DCChargingParametersType
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Current
        /// <br/>urn:x-oca:ocpp:uid:1:569215
        /// <br/>Maximum current (amps) supported by the electric vehicle. Includes cable capacity.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMaxCurrent", Required = Newtonsoft.Json.Required.Always)]
        public int EvMaxCurrent { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Voltage
        /// <br/>urn:x-oca:ocpp:uid:1:569216
        /// <br/>Maximum voltage supported by the electric vehicle
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMaxVoltage", Required = Newtonsoft.Json.Required.Always)]
        public int EvMaxVoltage { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
        /// <br/>urn:x-oca:ocpp:uid:1:569217
        /// <br/>Amount of energy requested (in Wh). This inludes energy required for preconditioning.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("energyAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EnergyAmount { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Max. Power
        /// <br/>urn:x-oca:ocpp:uid:1:569218
        /// <br/>Maximum power (in W) supported by the electric vehicle. Required for DC charging.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evMaxPower", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EvMaxPower { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. State_ Of_ Charge. Numeric
        /// <br/>urn:x-oca:ocpp:uid:1:569219
        /// <br/>Energy available in the battery (in percent of the battery capacity)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stateOfCharge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? StateOfCharge { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. EV_ Energy_ Capacity. Numeric
        /// <br/>urn:x-oca:ocpp:uid:1:569220
        /// <br/>Capacity of the electric vehicle battery (in Wh)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evEnergyCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EvEnergyCapacity { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. Full_ SOC. Percentage
        /// <br/>urn:x-oca:ocpp:uid:1:569221
        /// <br/>Percentage of SoC at which the EV considers the battery fully charged. (possible values: 0 - 100)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullSoC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? FullSoC { get; set; }

        /// <summary>
        /// DC_ Charging_ Parameters. Bulk_ SOC. Percentage
        /// <br/>urn:x-oca:ocpp:uid:1:569222
        /// <br/>Percentage of SoC at which the EV considers a fast charging process to end. (possible values: 0 - 100)
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bulkSoC", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? BulkSoC { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class NotifyEVChargingNeedsRequest
    {
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// Contains the maximum schedule tuples the car supports per schedule.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxScheduleTuples", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxScheduleTuples { get; set; }

        [Newtonsoft.Json.JsonProperty("chargingNeeds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ChargingNeedsType ChargingNeeds { get; set; } = new ChargingNeedsType();

        /// <summary>
        /// Defines the EVSE and connector to which the EV is connected. EvseId may not be 0.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evseId", Required = Newtonsoft.Json.Required.Always)]
        public int EvseId { get; set; }

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603